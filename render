#!/usr/bin/env python3

from datetime import timedelta

import json

import requests

from dateutil.parser import parse
from dateutil.tz import UTC
from dateutil.utils import today
from feedparser import parse as parse_feed
from jinja2 import Template


def get_feed(feed):
    f = []
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
        "Accept": "application/atom+xml,application/rdf+xml,application/rss+xml,application/x-netcdf,application/xml;q=0.9,text/xml;q=0.2,*/*;q=0.1",
    }
    for _ in range(3):
        try:
            resp = requests.get(feed, timeout=30, headers=headers)
            resp.raise_for_status()
            f = parse_feed(resp.content)
            if len(f.entries) > 0:
                return f
        except requests.exceptions.Timeout:
            print(f"Timeout while fetching feed: {feed}")
            continue
        except Exception as e:
            print(f"Error while fetching feed: {feed}: {e}")
            continue
    return f


def main():
    with open("feeds.json", "r") as f:
        data = json.loads(f.read())

    for name, info in data["feeds"].items():
        info["posts"] = []
        feed_data = get_feed(info["feed"])
        if feed_data == []:
            continue
        for entry in feed_data.entries:
            if entry["title"] in [post["title"] for post in info["posts"]]:
                continue
            post_date = parse(entry["published"]).astimezone(UTC)
            info["posts"].append(
                {
                    "title": entry["title"],
                    "link": entry["link"],
                    "date": post_date,
                    "new": abs(today(UTC) - post_date) < timedelta(days=1),
                }
            )
            if len(info["posts"]) >= 5:
                info["posts"].sort(key=lambda x: x["date"], reverse=True)
                break
        print(f"posts captured for {name}")

    template = Template(open("template.html.j2").read())
    with open("rendered/index.html", "w") as f:
        f.write(template.render(data=data))
    print("template rendered")


if __name__ == "__main__":
    main()
